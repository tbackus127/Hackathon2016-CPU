The simplest way is to instantiate in the main section of top,
creating a named instance and wiring the ports up in order:

<code>
module top(
   input        clk,
   input        rst_n,
   input        enable,
   input  [9:0] data_rx_1,
   input  [9:0] data_rx_2,
   output [9:0] data_tx_2
);

subcomponent subcomponent_instance_name (
  clk, rst_n, data_rx_1, data_tx ); 

endmodule
</code>

This has a few draw backs especially regarding the port order of the
subcomponent code. simple refactoring here can break connectivity or
change behaviour. for example if some one else fixs a bug and reorders
the ports for some reason, switching the clk and reset order. There
will be no connectivity issue from your compiler but will not work as
intended.

<code>
module subcomponent(
  input        rst_n,       
  input        clk,
  ...
</code>

It is therefore recommended to connect using named ports, this also
helps tracing connectivity of wires in the code.

<code>
module top(
   input        clk,
   input        rst_n,
   input        enable,
   input  [9:0] data_rx_1,
   input  [9:0] data_rx_2,
   output [9:0] data_tx_2
);

subcomponent subcomponent_instance_name (
  .clk(clk), .rst_n(rst_n), .data_rx(data_rx_1), .data_tx(data_tx) ); 

endmodule
</code>

Giving each port its own line and indenting correctly adds to the
readability and code quality.

<code>
subcomponent subcomponent_instance_name (
  .clk      ( clk       ), // input
  .rst_n    ( rst_n     ), // input
  .data_rx  ( data_rx_1 ), // input  [9:0]
  .data_tx  ( data_tx   )  // output [9:0]
);
</code>

So far all the connections that have been made have reused inputs and
output to the sub module and no connectivity wires have been created.
What happens if we are to take outputs from one component to another:

<code>
clk_gen( 
  .clk      ( clk_sub   ), // output
  .en       ( enable    )  // input

subcomponent subcomponent_instance_name (
  .clk      ( clk_sub   ), // input
  .rst_n    ( rst_n     ), // input 
  .data_rx  ( data_rx_1 ), // input  [9:0]
  .data_tx  ( data_tx   )  // output [9:0]
);
</code>

This nominally works as a wire for clk_sub is automatically created,
there is a danger to relying on this. it will only ever create a 1
bit wire by default. An example where this is a problem would be for
the data:

Note that the instance name for the second component has been changed

<code>
subcomponent subcomponent_instance_name (
  .clk      ( clk_sub   ), // input
  .rst_n    ( rst_n     ), // input 
  .data_rx  ( data_rx_1 ), // input  [9:0]
  .data_tx  ( data_temp )  // output [9:0]
);
subcomponent subcomponent_instance_name2 (
  .clk      ( clk_sub   ), // input
  .rst_n    ( rst_n     ), // input 
  .data_rx  ( data_temp ), // input  [9:0]
  .data_tx  ( data_tx   )  // output [9:0]
);
</code>

The issue with the above code is that data_temp is only 1 bit wide,
there would be a compile warning about port width mismatch. The
connectivity wire needs to be created and a width specified. I would
recommend that all connectivity wires be explicitly written out.

<code>
wire [9:0] data_temp
subcomponent subcomponent_instance_name (
  .clk      ( clk_sub   ), // input
  .rst_n    ( rst_n     ), // input 
  .data_rx  ( data_rx_1 ), // input  [9:0]
  .data_tx  ( data_temp )  // output [9:0]
);
subcomponent subcomponent_instance_name2 (
  .clk      ( clk_sub   ), // input
  .rst_n    ( rst_n     ), // input 
  .data_rx  ( data_temp ), // input  [9:0]
  .data_tx  ( data_tx   )  // output [9:0]
);
</code>

Moving to SystemVerilog there are a few tricks available that save
typing a handful of characters. I believe that they hinder the
code readability and can make it harder to find bugs.

Use .port with no brackets to connect to a wire/reg of the same name.
This can look neat especially with lots of clk and resets but at some
levels you may generate different clocks or resets or you actually do
not want to connect to the signal of the same name but a modified one
and this can lead to wiring bugs that are not obvious to the eye.

<code>
module top(
   input        clk,
   input        rst_n,
   input        enable,
   input  [9:0] data_rx_1,
   input  [9:0] data_rx_2,
   output [9:0] data_tx_2
);

subcomponent subcomponent_instance_name (
  .clk,                    // input **Auto connect**
  .rst_n,                  // input **Auto connect**
  .data_rx  ( data_rx_1 ), // input  [9:0]
  .data_tx  ( data_tx   )  // output [9:0]
);

endmodule
</code>

Another trick that I think is even worse than the one above is .*
which connects unmentioned ports to signals of the same wire. I
consider this to be quite dangerous in production code. It is not
obvious when new ports have been added and are missing or that they
might accidentally get connected if the new port name had a counter
part in the instancing level, they get auto connected and no warning
would be generated.

<code>
subcomponent subcomponent_instance_name (
  .*,                      // **Auto connect**
  .data_rx  ( data_rx_1 ), // input  [9:0]
  .data_tx  ( data_tx   )  // output [9:0]
);
</code>
